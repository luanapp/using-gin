// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "This returns a JSON {\"status\": \"OK\"} with a status 200 if the server is up",
                "tags": [
                    "health"
                ],
                "summary": "Returns OK if the server is up",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/species": {
            "get": {
                "description": "Retrieves all species from database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "species"
                ],
                "summary": "Get all species",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/species.Species"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "description": "Saves the species information into database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "species"
                ],
                "summary": "Saves the given species",
                "parameters": [
                    {
                        "description": "Species Payload",
                        "name": "species",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/species.Species"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/species.Species"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/species/{id}": {
            "get": {
                "description": "Retrieves the species from database with the given id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "species"
                ],
                "summary": "Get species with the given id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Species ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/species.Species"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the species information with the given id in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "species"
                ],
                "summary": "Updates the species with the given id",
                "parameters": [
                    {
                        "description": "Species Payload",
                        "name": "species",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/species.Species"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Species ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the species information with the given id from database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "species"
                ],
                "summary": "Deletes the species with the given id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Species ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": ""
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "species.Species": {
            "type": "object",
            "required": [
                "class",
                "family",
                "genus",
                "kingdom",
                "order",
                "phylum",
                "scientific_name"
            ],
            "properties": {
                "class": {
                    "type": "string",
                    "example": "Amphibia"
                },
                "family": {
                    "type": "string",
                    "example": "Dendrobatidae"
                },
                "genus": {
                    "type": "string",
                    "example": "Phyllobates"
                },
                "id": {
                    "type": "string",
                    "example": "996ff476-09bc-45f8-b79d-83b268de2485"
                },
                "kingdom": {
                    "type": "string",
                    "example": "Animalia"
                },
                "order": {
                    "type": "string",
                    "example": "Anura"
                },
                "phylum": {
                    "type": "string",
                    "example": "Chordata"
                },
                "scientific_name": {
                    "type": "string",
                    "example": "Phyllobates terribilis"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0.0",
	Host:        "localhost:8080",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Natural History Museum API documentation",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
